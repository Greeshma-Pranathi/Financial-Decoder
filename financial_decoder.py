# -*- coding: utf-8 -*-
"""Financial_Decoder.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1yjQTuZalu5RsdXLguI8R9GjL3aAyxGl9
"""

!pip install -q google-generativeai gradio pandas matplotlib seaborn plotly
import warnings
warnings.filterwarnings('ignore')

import google.generativeai as genai

# Replace 'YOUR_API_KEY' with your Gemini Pro API key
genai.configure(api_key="AIzaSyAs4FgQPFweV85rBRxrTi7kSn8x09bnDD0")

model = genai.GenerativeModel('gemini-pro')

import pandas as pd

def upload_and_read_file(file):
    if file.name.endswith('.csv'):
        df = pd.read_csv(file)
    elif file.name.endswith(('.xls', '.xlsx')):
        df = pd.read_excel(file)
    else:
        raise ValueError("Unsupported file format. Please upload CSV or Excel.")
    return df

def generate_insights(df):
    prompt = f"Analyze the following financial data and provide concise insights:\n{df.head(10)}"
    response = model.generate_content(prompt)
    return response.text.strip()

import plotly.express as px
import matplotlib.pyplot as plt
import seaborn as sns

def generate_dashboard(df):
    fig1 = px.bar(df, x=df.columns[0], y=df.columns[1], title="Revenue Trend")
    fig2 = px.line(df, x=df.columns[0], y=df.columns[2], title="Profit Trend")
    fig3 = px.pie(df, names=df.columns[0], values=df.columns[3], title="Expense Distribution")
    return fig1, fig2, fig3

import gradio as gr

def process_file(file):
    try:
        df = upload_and_read_file(file)
        insights = generate_insights(df).replace("*", "").replace("**", "").strip()
        fig1, fig2, fig3 = generate_dashboard(df)
        return insights, fig1, fig2, fig3
    except Exception as e:
        return f"‚ö†Ô∏è Error: {str(e)}", None, None, None

# Dark theme with custom CSS
custom_css = """
body { background-color: #181818; color: #E0E0E0; font-family: 'Inter', sans-serif; }
h1, h2, h3 { color: #BB86FC; }
.gr-button { background-color: #3700B3; color: white; border-radius: 12px; }
.gr-file { border: 2px dashed #BB86FC; }
"""

with gr.Blocks(css=custom_css) as demo:
    gr.Markdown("# üíπ Financial Decoder")
    gr.Markdown("Upload your financial statement to receive brief insights and visual analytics.")

    with gr.Row():
        file_input = gr.File(label="Upload Financial Statement", file_types=[".csv", ".xls", ".xlsx"])
        submit_button = gr.Button("Analyze")

    insights_output = gr.Textbox(label="üìù Insights", lines=6, interactive=False)

    with gr.Row():
        with gr.Column():
            chart1 = gr.Plot(label="üìä Revenue Trend")
            chart2 = gr.Plot(label="üìà Profit Trend")
        with gr.Column():
            chart3 = gr.Plot(label="ü•ß Expense Distribution")

    submit_button.click(fn=process_file, inputs=file_input, outputs=[insights_output, chart1, chart2, chart3])

demo.launch(debug=True)